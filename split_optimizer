#!/bin/bash

CONFIG_FILE="$HOME/.config/split_optimizer/split_optimizer.conf"

print_help() {
  echo "üì¶ Optimize APK bundle (.apks, .apkm, .zip, etc.)"
  echo
  echo "Usage: $0 your_app.<ext>"
  echo

  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "‚ö†Ô∏è  Config file '$CONFIG_FILE' not found."
  else
    # Validate config keys
    bad_keys=()
    for key in LANG DPI ARCH; do
      value=$(grep "^$key=" "$CONFIG_FILE" | cut -d= -f2 | tr -d ' ')
      if [[ -z "$value" ]]; then
        bad_keys+=("$key")
      fi
    done

    if [[ ${#bad_keys[@]} -gt 0 ]]; then
      echo "‚ö†Ô∏è  Invalid config: Missing or empty keys in $CONFIG_FILE: ${bad_keys[*]}"
    else
      echo "Reads filters from $CONFIG_FILE:"
      grep -E '^(LANG|DPI|ARCH)=' "$CONFIG_FILE" | while IFS= read -r line; do
        key="${line%%=*}"
        value="${line#*=}"
        echo "  - $key: $value"
      done
    fi
  fi

  echo
  echo "Output file: your_app_optimized.<ext>"
  echo
  exit 0
}

# === Check required tools ===
for dep in unzip zip; do
  if ! command -v "$dep" &>/dev/null; then
    echo "‚ùå Error: Required command '$dep' not found. Please install it."
    exit 1
  fi
done

# === Help flag check ===
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  print_help
fi

# === Usage check ===
if [[ $# -eq 0 || -z "$1" ]]; then
  echo "‚ùå Invalid usage: Missing input file."
  echo "Run with -h or --help for usage information."
  exit 1
fi

# === Load config ===
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Error: Config file '$CONFIG_FILE' not found."
  exit 1
fi

# Parse config
IFS=',' read -ra LANGS <<< "$(grep '^LANG=' "$CONFIG_FILE" | cut -d= -f2 | tr -d ' ')"
IFS=',' read -ra DPIS  <<< "$(grep '^DPI=' "$CONFIG_FILE"  | cut -d= -f2 | tr -d ' ')"
IFS=',' read -ra ARCHS <<< "$(grep '^ARCH=' "$CONFIG_FILE" | cut -d= -f2 | tr -d ' ')"

# Validate config content
if [[ -z "${LANGS[*]}" || -z "${DPIS[*]}" || -z "${ARCHS[*]}" ]]; then
  echo "‚ùå Error: Config file is missing required values (LANG, DPI, ARCH)."
  exit 1
fi

# === Input setup ===
INPUT="$1"
EXT="${INPUT##*.}"
BASENAME="${INPUT%.*}"
TMPDIR=$(mktemp -d)
trap 'rm -rf "$TMPDIR"' EXIT

echo "[*] Extracting $INPUT to $TMPDIR ..."
unzip -q "$INPUT" -d "$TMPDIR" || { echo "‚ùå Failed to unzip $INPUT"; exit 1; }

echo "[*] Filtering APK splits and cleaning up ..."

for entry in "$TMPDIR"/*; do
  name=$(basename "$entry")

  # Remove directories
  if [[ -d "$entry" ]]; then
    echo "  Removing directory: $name"
    rm -rf "$entry"
    continue
  fi

  keep=false
  [[ "$name" == "base.apk" ]] && keep=true

  for lang in "${LANGS[@]}"; do
    [[ "$name" == "split_config.${lang}.apk" ]] && keep=true
  done

  for dpi in "${DPIS[@]}"; do
    [[ "$name" == "split_config.${dpi}.apk" ]] && keep=true
  done

  for arch in "${ARCHS[@]}"; do
    [[ "$name" == "split_config.${arch}.apk" ]] && keep=true
  done

  if [[ "$keep" == true ]]; then
    echo "  Keeping $name"
  else
    echo "  Removing $name"
    rm -f "$entry"
  fi
done

OUTPUT="${BASENAME}_optimized.${EXT}"
echo "[*] Creating optimized APK bundle: $OUTPUT"

(
  cd "$TMPDIR" || exit 1
  zip -q -r "$OLDPWD/$OUTPUT" . || { echo "‚ùå Failed to create $OUTPUT"; exit 1; }
)

echo "[‚úÖ] Done! Optimized APK bundle saved as $OUTPUT"
